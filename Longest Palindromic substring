*/Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.
*/


public class Main {

    public static void main(String[] args) {
        String s = "abbba";
        maxlen_Palindrome_String m1 = new maxlen_Palindrome_String();
        System.out.println(m1.maxLenPalString(s));  // expected ans "abbba"
    }
}

1.test case => s = "a"; return--> "a"
2.test case=> s = "abbccccbbddd" return--> "bbccccbb"





public class maxlen_Palindrome_String {

    public maxlen_Palindrome_String() {};

    public static String maxLenPalString(String s) {
        int start = 0;
        int end = 0;

        if (s.isEmpty() || s == null) System.out.println("");
        for (int i = 0; i < s.length(); i++) {
            int l1 = efm(s, i, i);
            int l2 = efm(s, i, i + 1);
            int len = Math.max(l1, l2);

            if (len > (end - start)) {
                start = i - (len - 1) / 2;
                end = i + len / 2;

            }

        }
        return (s.substring(start, end + 1));



    }
    private static int efm (String s,int left, int right){
        int l = 0;
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        l = right - left - 1;


        return l;
    }
}
        
        
        
        
