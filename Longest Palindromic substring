*/Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.
*/




public class Main {

    public static void main(String[] args) {
        String s = "cbbd";
        char[] chararr = s.toCharArray();
        int right = 0;
        int left = 0;
        String substr = "";
        String maxlenstr = "";

        if(s.length()==1 || s.equals("")){
            s= maxlenstr;
        }
        else {

            for (left = 0; left <= s.length() - 1; left++) {
                for (right = 1 + left; right <= s.length() ; right++) {

                    String sub = s.substring(left, right);
                    if (isPalin(sub)) {
                        substr = sub;

                        if (substr.length() > maxlenstr.length()) {
                            maxlenstr = substr;

                        }

                    }
                }
            }
        }
        return (maxlenstr);
        }




    public static boolean isPalin(String s){
        int left = 0;
        boolean ispalin = false;
        char[] palincharr  =s.toCharArray();
        int right = s.length()-1;
        if(s.length()==1 || s.equals("")){return true;}
        while (left<right){
            if(palincharr[left]==palincharr[right]){
                left++;
                right--;
                ispalin = true;
            }
            else{ispalin=  false;
            break;}
        }

        return ispalin;
        }

    }
